/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Jframes;

/**
 *
 * @author John Chris LedamaÂ 
 */

import com.formdev.flatlaf.FlatDarculaLaf;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import Database.DBConnection;
import java.sql.PreparedStatement;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.sql.Date;
import java.text.ParseException;

import java.time.LocalDate;
import java.text.SimpleDateFormat;


public class SelectIssuedBook extends javax.swing.JDialog {
    private ReturnBook returnBookForm;
    /**
     * Creates new form SelectIssuedBook
     */
    public SelectIssuedBook(java.awt.Frame parent, boolean modal, ReturnBook returnBookForm) {
        super(parent, modal);
        initComponents();
        this.returnBookForm = returnBookForm;
        fetchRecordsFromDatabase();
    }
    public SelectIssuedBook(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        fetchRecordsFromDatabase();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        issuedTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        searchTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jLabel2.setText("Search:");

        jButton1.setBackground(new java.awt.Color(25, 25, 25));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(110, 110, 110));
        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(110, 110, 110));
        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton2.setText("Select Book");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        issuedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Issued ID", "Book ID", "Book Name", "Student Name", "Student ID", "Issued Date", "Return Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        issuedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issuedTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(issuedTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchTextField.getText().trim();  // Get search term from the text field
        searchIssuedBooks(searchTerm);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = issuedTable.getSelectedRow();
    
        if (selectedRow != -1) {
            // Extract values from the selected row
            String issueId = issuedTable.getValueAt(selectedRow, 0).toString();
            String bookId = issuedTable.getValueAt(selectedRow, 1).toString();
            String bookName = issuedTable.getValueAt(selectedRow, 2).toString();
            String studentId = issuedTable.getValueAt(selectedRow, 3).toString();
            String studentName = issuedTable.getValueAt(selectedRow, 4).toString();

            // Parse issueDate and returnDate from String to java.sql.Date
            String issueDateStr = issuedTable.getValueAt(selectedRow, 5).toString();
            String returnDateStr = issuedTable.getValueAt(selectedRow, 6).toString();

            java.sql.Date issueDate = null;
            java.sql.Date returnDate = null;

            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Match the format of the stored date
                if (!issueDateStr.isEmpty()) {
                    issueDate = new java.sql.Date(sdf.parse(issueDateStr).getTime());
                }
                if (!returnDateStr.isEmpty()) {
                    returnDate = new java.sql.Date(sdf.parse(returnDateStr).getTime());
                }
            } catch (ParseException e) {
                e.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "Error parsing dates.");
            }

            String status = issuedTable.getValueAt(selectedRow, 7).toString();

            // Pass the values to the returnBookForm.setSelectedIssueDetails method
            if (returnBookForm != null){
            returnBookForm.setSelectedIssueDetails(issueId, bookId, bookName, studentId, studentName, issueDate, returnDate, status);
            }
            
            // Close the SelectIssuedBook form
            this.dispose();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a record.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void issuedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issuedTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_issuedTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectIssuedBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectIssuedBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectIssuedBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectIssuedBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SelectIssuedBook dialog = new SelectIssuedBook(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void fetchRecordsFromDatabase() {
        String query = """
    SELECT ib.issue_id, ib.book_id, b.book_name, s.student_id, s.student_name, 
           ib.issue_date, ib.return_date, ib.status
    FROM issued_books ib
    JOIN students s ON ib.student_id = s.student_id
    JOIN books b ON ib.book_id = b.book_id  -- Join with the books table to fetch book_name
    WHERE ib.status IN ('Active', 'Overdue')  -- Only show Active or Overdue books                   
    """;
    try (Connection conn = DBConnection.connect();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {
        DefaultTableModel model = (DefaultTableModel) issuedTable.getModel();
        model.setRowCount(0); // Clear table
        while (rs.next()) {
            int issueID = rs.getInt("issue_id");
            String bookID = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String studentID = rs.getString("student_id");
            String studentName = rs.getString("student_name");
            java.sql.Date issueDate = rs.getDate("issue_date");
            java.sql.Date returnDate = rs.getDate("return_date");
            String dbStatus = rs.getString("status");

            // Determine status
            String status = dbStatus;
            if ("Active".equalsIgnoreCase(dbStatus) && returnDate != null) {
                LocalDate today = LocalDate.now();
                LocalDate dueDate = returnDate.toLocalDate();
                if (dueDate.isBefore(today)) {
                    status = "Overdue";
                }
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            model.addRow(new Object[]{
                issueID, bookID, bookName, studentID, studentName,
                sdf.format(issueDate),
                returnDate != null ? sdf.format(returnDate) : "N/A",
                status
            });
        }
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        e.printStackTrace();
    }
}

    private void searchIssuedBooks(String searchTerm) {
        String sql = """
        SELECT ib.issue_id, ib.book_id, b.book_name, ib.student_id, s.student_name, ib.issue_date, ib.return_date, ib.status
        FROM issued_books ib
        JOIN students s ON ib.student_id = s.student_id
        JOIN books b ON ib.book_id = b.book_id  -- Join with the books table to fetch book_name
        WHERE ib.issue_id LIKE ? 
           OR ib.book_id LIKE ? 
           OR b.book_name LIKE ?  -- Search by book name
           OR ib.student_id LIKE ? 
           OR s.student_name LIKE ?
    """;
    try (Connection conn = DBConnection.connect();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        String searchPattern = "%" + searchTerm + "%";
        for (int i = 1; i <= 5; i++) {
            stmt.setString(i, searchPattern);
        }
        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) issuedTable.getModel();
            model.setRowCount(0);  // Clear table
            while (rs.next()) {
                int issueId = rs.getInt("issue_id");
                String bookId = rs.getString("book_id");
                String bookName = rs.getString("book_name");
                String studentId = rs.getString("student_id");
                String studentName = rs.getString("student_name");
                java.sql.Date issueDate = rs.getDate("issue_date");
                java.sql.Date returnDate = rs.getDate("return_date");
                String dbStatus = rs.getString("status");

                // Determine status
                String status = dbStatus;
                if ("Active".equalsIgnoreCase(dbStatus) && returnDate != null) {
                    LocalDate today = LocalDate.now();
                    LocalDate dueDate = returnDate.toLocalDate();
                    if (dueDate.isBefore(today)) {
                        status = "Overdue";
                    }
                }

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                model.addRow(new Object[]{
                    issueId, bookId, bookName, studentId, studentName,
                    sdf.format(issueDate),
                    returnDate != null ? sdf.format(returnDate) : "N/A",
                    status
                });
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable issuedTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
