/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Jframes;

import com.formdev.flatlaf.FlatDarculaLaf;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.ArrayList;
import java.util.List;
import java.awt.*;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import Database.DBConnection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.text.SimpleDateFormat;
import javax.swing.table.TableColumn;


public class DefaulterList extends javax.swing.JFrame {

    /**
     * Creates new form VIewRecords
     */
    public DefaulterList() {
        initComponents();
        loadOverdueBookRecords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ViewRecord_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        defaulterTable = new javax.swing.JTable();
        Back = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 0, 51));
        setResizable(false);

        ViewRecord_Label.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        ViewRecord_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/book.png"))); // NOI18N
        ViewRecord_Label.setText("Defaulter List");

        defaulterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Issue ID", "Book Name", "Book ID", "Student Name", "Student ID", "Issue Date", "Due Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(defaulterTable);
        if (defaulterTable.getColumnModel().getColumnCount() > 0) {
            defaulterTable.getColumnModel().getColumn(7).setCellRenderer(null);
        }

        Back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Back.setText("BACK");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jLabel2.setText("Search:");

        jButton1.setBackground(new java.awt.Color(25, 25, 25));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(221, 221, 221)
                        .addComponent(ViewRecord_Label)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(41, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(ViewRecord_Label))
                        .addGap(39, 39, 39)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        Main mainFrame = new Main();
        this.dispose();
        mainFrame.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchTextField.getText().trim();
        searchOverdueBooks(searchTerm);
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) {
       try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (Exception ex) {
            System.err.println("Failed to apply theme.");
        }

    java.awt.EventQueue.invokeLater(() -> new DefaulterList().setVisible(true));
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
        new DefaulterList().setVisible(true);
    }
        });

    }

    
    public void loadOverdueBookRecords() {
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    try {
        // Connect to DB
        Connection conn = DBConnection.connect();
        // Query to fetch only overdue books
        String sql = "SELECT ib.issue_id, ib.book_id, b.book_name, s.student_id, s.student_name, " +
                     "ib.issue_date, ib.return_date, ib.status " +
                     "FROM issued_books ib " +
                     "JOIN books b ON ib.book_id = b.book_id " +
                     "JOIN students s ON ib.student_id = s.student_id " +
                     "WHERE ib.status = 'Overdue'";  // get only overdue books
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();

        // Collect rows into a list
        List<Object[]> rows = new ArrayList<Object[]>();
        while (rs.next()) {
            int issueID = rs.getInt("issue_id");
            String bookID = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String studentID = rs.getString("student_id");
            String studentName = rs.getString("student_name");
            java.sql.Date issueDate = rs.getDate("issue_date");
            java.sql.Date returnDate = rs.getDate("return_date");
            String status = "Overdue"; // 

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            rows.add(new Object[]{
                issueID, bookName, bookID, studentName, studentID,
                sdf.format(issueDate),
                returnDate != null ? sdf.format(returnDate) : "N/A",
                status
            });
        }
        
        // Table model
        DefaultTableModel model = (DefaultTableModel) defaulterTable.getModel();
        model.setRowCount(0); // Clear table
        // Add the rows back to the table model
        for (Object[] row : rows) {
            model.addRow(row);
        }
        
        TableColumn statusCol = defaulterTable.getColumnModel().getColumn(7); 
        statusCol.setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if ("Overdue".equalsIgnoreCase(String.valueOf(value))) {
                    c.setForeground(Color.RED);
                } else if ("Active".equalsIgnoreCase(String.valueOf(value))) {
                    c.setForeground(new Color(40, 167, 69));
                } else {
                    c.setForeground(new Color(33, 150, 243));
                }
                return c;
            }
        });

        rs.close();
        pst.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading overdue records: " + e.getMessage());
    }
}
    
    public void searchOverdueBooks(String searchTerm) {
    String sql = "SELECT ib.issue_id, ib.book_id, b.book_name, s.student_id, s.student_name, " +
                 "ib.issue_date, ib.return_date, ib.status " +
                 "FROM issued_books ib " +
                 "JOIN books b ON ib.book_id = b.book_id " +
                 "JOIN students s ON ib.student_id = s.student_id " +
                 "WHERE ib.status = 'Overdue' AND (" +
                 "ib.issue_id LIKE ? OR ib.book_id LIKE ? OR b.book_name LIKE ? " +
                 "OR s.student_id LIKE ? OR s.student_name LIKE ?)";
    try {
        Connection conn = DBConnection.connect();
        PreparedStatement stmt = conn.prepareStatement(sql);
        String searchPattern = "%" + searchTerm + "%";
        stmt.setString(1, searchPattern);    // ib.issue_id
        stmt.setString(2, searchPattern);    // ib.book_id
        stmt.setString(3, searchPattern);    // b.book_name
        stmt.setString(4, searchPattern);    // s.student_id
        stmt.setString(5, searchPattern);    // s.student_name
        ResultSet rs = stmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) defaulterTable.getModel();
        model.setRowCount(0);  // Clear table before adding new rows
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        while (rs.next()) {
            int issueID = rs.getInt("issue_id");
            String bookID = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String studentID = rs.getString("student_id");
            String studentName = rs.getString("student_name");
            java.sql.Date issueDate = rs.getDate("issue_date");
            java.sql.Date returnDate = rs.getDate("return_date");
            String status = "Overdue";  // All results are overdue

            model.addRow(new Object[]{
                issueID, bookName, bookID, studentName, studentID,
                sdf.format(issueDate),
                returnDate != null ? sdf.format(returnDate) : "N/A",
                status
            });
        }
        rs.close();
        stmt.close();
        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching overdue records: " + e.getMessage());
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel ViewRecord_Label;
    private javax.swing.JTable defaulterTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
