/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Jframes;

import com.formdev.flatlaf.FlatDarculaLaf;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.ArrayList;
import java.util.List;
import java.awt.*;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import Database.DBConnection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.text.SimpleDateFormat;
import javax.swing.table.TableColumn;

public class ViewRecords extends javax.swing.JFrame {

    /**
     * Creates new form VIewRecords
     */
    public ViewRecords() {
        initComponents();
        loadIssuedBookRecords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ViewRecord_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ViewRecords = new javax.swing.JTable();
        Back = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 0, 51));
        setResizable(false);

        ViewRecord_Label.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        ViewRecord_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/book.png"))); // NOI18N
        ViewRecord_Label.setText("View Records");

        ViewRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Issue ID", "Book Name", "Book ID", "Student Name", "Student ID", "Issue Date", "Due Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ViewRecords);

        Back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Back.setText("BACK");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jLabel2.setText("Search:");

        jButton1.setBackground(new java.awt.Color(25, 25, 25));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(221, 221, 221)
                        .addComponent(ViewRecord_Label)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(41, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(ViewRecord_Label))
                        .addGap(39, 39, 39)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        Main mainFrame = new Main();
        this.dispose();
        mainFrame.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchTextField.getText().trim();
        searchIssuedBooks(searchTerm);
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) {
       try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (Exception ex) {
            System.err.println("Failed to apply theme.");
        }

    java.awt.EventQueue.invokeLater(() -> new ViewRecords().setVisible(true));
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
        new ViewRecords().setVisible(true);
    }
        });

    }
    
    private int getStatusPriority(String status) {
    switch (status) {
        case "Overdue": return 0;
        case "Active": return 1;
        case "Returned": return 2;
        default: return 3; // catch-all for unexpected statuses
    }
}
    
    public void loadIssuedBookRecords() {
        Connection con;
        PreparedStatement pst;
        ResultSet rs;
        try {
            // Connect to DB
            Connection conn = DBConnection.connect();
            // Query
            String sql = "SELECT ib.issue_id, ib.book_id, b.book_name, s.student_id, s.student_name, " +
                         "ib.issue_date, ib.return_date, ib.status " +
                         "FROM issued_books ib " +
                         "JOIN books b ON ib.book_id = b.book_id " +
                         "JOIN students s ON ib.student_id = s.student_id";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            // Collect rows into a list
            List<Object[]> rows = new ArrayList<Object[]>();
            while (rs.next()) {
                int issueID = rs.getInt("issue_id");
                String bookID = rs.getString("book_id");
                String bookName = rs.getString("book_name");
                String studentID = rs.getString("student_id");
                String studentName = rs.getString("student_name");
                java.sql.Date issueDate = rs.getDate("issue_date");
                java.sql.Date returnDate = rs.getDate("return_date");
                String dbStatus = rs.getString("status");

                // Dynamically determine if overdue
                String status = dbStatus;
                if ("Active".equalsIgnoreCase(dbStatus) && returnDate != null) {
                    LocalDate today = LocalDate.now();
                    LocalDate dueDate = returnDate.toLocalDate();
                    if (dueDate.isBefore(today)) {
                        status = "Overdue";
                    }
                }

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                rows.add(new Object[]{
                    issueID, bookName, bookID, studentName, studentID,
                    sdf.format(issueDate),
                    returnDate != null ? sdf.format(returnDate) : "N/A",
                    status
                });
            }

            // Sort rows: first "Overdue", then "Active" and "Returned"
            rows.sort((row1, row2) -> {
            String status1 = (String) row1[7];
            String status2 = (String) row2[7];

            int priority1 = getStatusPriority(status1);
            int priority2 = getStatusPriority(status2);

            if (priority1 != priority2) {
                return Integer.compare(priority1, priority2); // sort by priority
            } else {
                return Integer.compare((int) row1[0], (int) row2[0]); // then by issue ID
            }
        });

            // Table model
            DefaultTableModel model = (DefaultTableModel) ViewRecords.getModel();
            model.setRowCount(0); // clear table

            // Add the sorted rows back to the table model
            for (Object[] row : rows) {
                model.addRow(row);
            }

            TableColumn statusCol = ViewRecords.getColumnModel().getColumn(7); 
            statusCol.setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if ("Overdue".equalsIgnoreCase(String.valueOf(value))) {
                    c.setForeground(Color.RED);
                } else if ("Active".equalsIgnoreCase(String.valueOf(value))) {
                    c.setForeground(new Color(40, 167, 69));
                } else {
                    c.setForeground(new Color(33, 150, 243));
                }
                return c;
            }
        });
            
            rs.close();
            pst.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading records: " + e.getMessage());
        }
}
    
    public void searchIssuedBooks(String searchTerm) {
    String sql = "SELECT ib.issue_id, ib.book_id, b.book_name, s.student_id, s.student_name, " +
             "ib.issue_date, ib.return_date, ib.status " +
             "FROM issued_books ib " +
             "JOIN books b ON ib.book_id = b.book_id " +
             "JOIN students s ON ib.student_id = s.student_id " +
             "WHERE (? = '' OR ib.issue_id LIKE ? OR ib.book_id LIKE ? OR b.book_name LIKE ? " +
             "OR s.student_id LIKE ? OR s.student_name LIKE ? OR ib.status LIKE ?) " +
             "ORDER BY " +
             "CASE ib.status " +
             "  WHEN 'Overdue' THEN 1 " +
             "  WHEN 'Active' THEN 2 " +
             "  WHEN 'Returned' THEN 3 " +
             "  ELSE 4 " +
             "END, ib.issue_id";

    try {
        Connection conn = DBConnection.connect();
        PreparedStatement stmt = conn.prepareStatement(sql);
        String searchPattern = "%" + searchTerm + "%";

        stmt.setString(1, searchTerm);       // For `? = ''`
        stmt.setString(2, searchPattern);    // ib.issue_id
        stmt.setString(3, searchPattern);    // ib.book_id
        stmt.setString(4, searchPattern);    // b.book_name
        stmt.setString(5, searchPattern);    // s.student_id
        stmt.setString(6, searchPattern);    // s.student_name
        stmt.setString(7, searchPattern);    // ib.status

        ResultSet rs = stmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) ViewRecords.getModel();
        model.setRowCount(0);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        while (rs.next()) {
            int issueID = rs.getInt("issue_id");
            String bookID = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String studentID = rs.getString("student_id");
            String studentName = rs.getString("student_name");
            java.sql.Date issueDate = rs.getDate("issue_date");
            java.sql.Date returnDate = rs.getDate("return_date");
            String dbStatus = rs.getString("status");

            // Check for overdue if status is Active
            String status = dbStatus;
            if ("Active".equalsIgnoreCase(dbStatus) && returnDate != null) {
                LocalDate today = LocalDate.now();
                LocalDate dueDate = returnDate.toLocalDate();
                if (dueDate.isBefore(today)) {
                    status = "Overdue";
                }
            }

            model.addRow(new Object[]{
                issueID, bookName, bookID, studentName, studentID,
                sdf.format(issueDate),
                returnDate != null ? sdf.format(returnDate) : "N/A",
                status
            });
        }
        rs.close();
        stmt.close();
        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching records: " + e.getMessage());
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel ViewRecord_Label;
    private javax.swing.JTable ViewRecords;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
